<jittershader name="The Emperor">
<description>Pixel Spirits 'The Emperor' card</description>

<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
<param name="position" type="vec3" state="POSITION" />
<param name="texcoord" type="vec2" state="TEXCOORD" />
<param name="iResolution" type="vec2" state="VIEWPORT" default="822. 1122." />
<param name="iTime" type="float" default="1." />

<language name="glsl" version="1.5">

<bind param="modelViewProjectionMatrix" program="vp" />
<bind param="textureMatrix0" program="vp" />
<bind param="position" program="vp" />
<bind param="texcoord" program="vp" />
<bind param="iResolution" program="fp" />
<bind param="iTime" program="fp" />

<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 position;
in vec2 texcoord;

out jit_PerVertex
{
	vec2 texcoord;
} jit_out;

uniform mat4 modelViewProjectionMatrix;
uniform mat4 textureMatrix0;

void main(void)
{
	gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
	jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
}
]]>
</program>

<program name="fp" type="fragment"  >

<![CDATA[
#version 330 core

#define S (1. + sin(iTime) / 4.)
#define C (1. + cos(iTime) / 4.)

const float PI = 3.14159;

in jit_PerVertex
{
	vec2 texcoord;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform vec2 iResolution;
uniform float iTime;

// Aliasing is apparent when things move. The original Pixel
// Spirit cards use `step` everywhere. Change most of them to
// smoothstep for anti-aliasing. Some later icons still need
// regular `step` due to their idiosyncratic usages
float sstep(float a, float b) {
    return smoothstep(a - .005, a + .005, b);
}

vec2 getOrientation(vec2 st)
{
	st = (st-.5)*1.1912+.5;
	if (iResolution.y > iResolution.x )
	{
  	st.y *= iResolution.y/iResolution.x;
  	st.y -= (iResolution.y*.5-iResolution.x*.5)/iResolution.x;
	}
	else
	{
  	st.x *= iResolution.x/iResolution.y;
  	st.x -= (iResolution.x*.5-iResolution.y*.5)/iResolution.y;
	}
	return st;
}

float stroke(float x, float s, float w)
{
	float d = step(s,x+w*.5) - step(s,x-w*.5);
	return clamp(d,0.,1.);
}

float circleSDF(vec2 st)
{
	return length(st-.5)*2.;
}

float fill(float x, float size)
{
	return 1.-step(size, x);
}

float rectSDF(vec2 st, vec2 s)
{
	st = st*2.-1.;
	return max(abs(st.x/s.x), abs(st.y/s.y));
}

void main(void)
{
	float color = 0.;
	vec2 st = gl_FragCoord.xy/iResolution;

	// From Patrico Gonzalez https://github.com/patriciogonzalezvivo/PixelSpiritDeck/tree/master/00-elements
	st = getOrientation(st); // Adjusts the screenspace according to whether the viewport is protrait or landscape?

	float sdf = rectSDF(st, vec2(1.));
	color = stroke(sdf, .5 * C, .125);
	color += fill(sdf, .1 * S);

	outColor = vec4(vec3(color),1.);
}
]]>
</program>
</language>
</jittershader>
